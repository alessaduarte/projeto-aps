{"ast":null,"code":"import speedometer from \"./speedometer.js\";\nimport throttle from \"./throttle.js\";\nexport default (function (listener, isDownloadStream) {\n  let freq = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 3;\n  let bytesNotified = 0;\n\n  const _speedometer = speedometer(50, 250);\n\n  return throttle(e => {\n    const loaded = e.loaded;\n    const total = e.lengthComputable ? e.total : undefined;\n    const progressBytes = loaded - bytesNotified;\n\n    const rate = _speedometer(progressBytes);\n\n    const inRange = loaded <= total;\n    bytesNotified = loaded;\n    const data = {\n      loaded,\n      total,\n      progress: total ? loaded / total : undefined,\n      bytes: progressBytes,\n      rate: rate ? rate : undefined,\n      estimated: rate && total && inRange ? (total - loaded) / rate : undefined,\n      event: e,\n      lengthComputable: total != null\n    };\n    data[isDownloadStream ? 'download' : 'upload'] = true;\n    listener(data);\n  }, freq);\n});","map":{"version":3,"sources":["C:/Users/aless/OneDrive/Área de Trabalho/Projeto APS/Aplicação/Frontend/nahtrainer/node_modules/axios/lib/helpers/progressEventReducer.js"],"names":["speedometer","throttle","listener","isDownloadStream","freq","bytesNotified","_speedometer","e","loaded","total","lengthComputable","undefined","progressBytes","rate","inRange","data","progress","bytes","estimated","event"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,kBAAxB;AACA,OAAOC,QAAP,MAAqB,eAArB;AAEA,gBAAe,UAACC,QAAD,EAAWC,gBAAX,EAA0C;AAAA,MAAbC,IAAa,uEAAN,CAAM;AACvD,MAAIC,aAAa,GAAG,CAApB;;AACA,QAAMC,YAAY,GAAGN,WAAW,CAAC,EAAD,EAAK,GAAL,CAAhC;;AAEA,SAAOC,QAAQ,CAACM,CAAC,IAAI;AACnB,UAAMC,MAAM,GAAGD,CAAC,CAACC,MAAjB;AACA,UAAMC,KAAK,GAAGF,CAAC,CAACG,gBAAF,GAAqBH,CAAC,CAACE,KAAvB,GAA+BE,SAA7C;AACA,UAAMC,aAAa,GAAGJ,MAAM,GAAGH,aAA/B;;AACA,UAAMQ,IAAI,GAAGP,YAAY,CAACM,aAAD,CAAzB;;AACA,UAAME,OAAO,GAAGN,MAAM,IAAIC,KAA1B;AAEAJ,IAAAA,aAAa,GAAGG,MAAhB;AAEA,UAAMO,IAAI,GAAG;AACXP,MAAAA,MADW;AAEXC,MAAAA,KAFW;AAGXO,MAAAA,QAAQ,EAAEP,KAAK,GAAID,MAAM,GAAGC,KAAb,GAAsBE,SAH1B;AAIXM,MAAAA,KAAK,EAAEL,aAJI;AAKXC,MAAAA,IAAI,EAAEA,IAAI,GAAGA,IAAH,GAAUF,SALT;AAMXO,MAAAA,SAAS,EAAEL,IAAI,IAAIJ,KAAR,IAAiBK,OAAjB,GAA2B,CAACL,KAAK,GAAGD,MAAT,IAAmBK,IAA9C,GAAqDF,SANrD;AAOXQ,MAAAA,KAAK,EAAEZ,CAPI;AAQXG,MAAAA,gBAAgB,EAAED,KAAK,IAAI;AARhB,KAAb;AAWAM,IAAAA,IAAI,CAACZ,gBAAgB,GAAG,UAAH,GAAgB,QAAjC,CAAJ,GAAiD,IAAjD;AAEAD,IAAAA,QAAQ,CAACa,IAAD,CAAR;AACD,GAvBc,EAuBZX,IAvBY,CAAf;AAwBD,CA5BD","sourcesContent":["import speedometer from \"./speedometer.js\";\nimport throttle from \"./throttle.js\";\n\nexport default (listener, isDownloadStream, freq = 3) => {\n  let bytesNotified = 0;\n  const _speedometer = speedometer(50, 250);\n\n  return throttle(e => {\n    const loaded = e.loaded;\n    const total = e.lengthComputable ? e.total : undefined;\n    const progressBytes = loaded - bytesNotified;\n    const rate = _speedometer(progressBytes);\n    const inRange = loaded <= total;\n\n    bytesNotified = loaded;\n\n    const data = {\n      loaded,\n      total,\n      progress: total ? (loaded / total) : undefined,\n      bytes: progressBytes,\n      rate: rate ? rate : undefined,\n      estimated: rate && total && inRange ? (total - loaded) / rate : undefined,\n      event: e,\n      lengthComputable: total != null\n    };\n\n    data[isDownloadStream ? 'download' : 'upload'] = true;\n\n    listener(data);\n  }, freq);\n}\n"]},"metadata":{},"sourceType":"module"}