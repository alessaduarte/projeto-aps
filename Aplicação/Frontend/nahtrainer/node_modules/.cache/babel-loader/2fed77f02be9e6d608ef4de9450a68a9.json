{"ast":null,"code":"const hasBrowserEnv = typeof window !== 'undefined' && typeof document !== 'undefined';\n/**\r\n * Determine if we're running in a standard browser environment\r\n *\r\n * This allows axios to run in a web worker, and react-native.\r\n * Both environments support XMLHttpRequest, but not fully standard globals.\r\n *\r\n * web workers:\r\n *  typeof window -> undefined\r\n *  typeof document -> undefined\r\n *\r\n * react-native:\r\n *  navigator.product -> 'ReactNative'\r\n * nativescript\r\n *  navigator.product -> 'NativeScript' or 'NS'\r\n *\r\n * @returns {boolean}\r\n */\n\nconst hasStandardBrowserEnv = (product => {\n  return hasBrowserEnv && ['ReactNative', 'NativeScript', 'NS'].indexOf(product) < 0;\n})(typeof navigator !== 'undefined' && navigator.product);\n/**\r\n * Determine if we're running in a standard browser webWorker environment\r\n *\r\n * Although the `isStandardBrowserEnv` method indicates that\r\n * `allows axios to run in a web worker`, the WebWorker will still be\r\n * filtered out due to its judgment standard\r\n * `typeof window !== 'undefined' && typeof document !== 'undefined'`.\r\n * This leads to a problem when axios post `FormData` in webWorker\r\n */\n\n\nconst hasStandardBrowserWebWorkerEnv = (() => {\n  return typeof WorkerGlobalScope !== 'undefined' && // eslint-disable-next-line no-undef\n  self instanceof WorkerGlobalScope && typeof self.importScripts === 'function';\n})();\n\nconst origin = hasBrowserEnv && window.location.href || 'http://localhost';\nexport { hasBrowserEnv, hasStandardBrowserWebWorkerEnv, hasStandardBrowserEnv, origin };","map":{"version":3,"sources":["C:/Users/beatr/OneDrive/Documentos/NahTrainer2.0/projeto-aps/Aplicação/Frontend/nahtrainer/node_modules/axios/lib/platform/common/utils.js"],"names":["hasBrowserEnv","window","document","hasStandardBrowserEnv","product","indexOf","navigator","hasStandardBrowserWebWorkerEnv","WorkerGlobalScope","self","importScripts","origin","location","href"],"mappings":"AAAA,MAAMA,aAAa,GAAG,OAAOC,MAAP,KAAkB,WAAlB,IAAiC,OAAOC,QAAP,KAAoB,WAA3E;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,qBAAqB,GAAG,CAC3BC,OAAD,IAAa;AACX,SAAOJ,aAAa,IAAI,CAAC,aAAD,EAAgB,cAAhB,EAAgC,IAAhC,EAAsCK,OAAtC,CAA8CD,OAA9C,IAAyD,CAAjF;AACD,CAH2B,EAGzB,OAAOE,SAAP,KAAqB,WAArB,IAAoCA,SAAS,CAACF,OAHrB,CAA9B;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMG,8BAA8B,GAAG,CAAC,MAAM;AAC5C,SACE,OAAOC,iBAAP,KAA6B,WAA7B,IACA;AACAC,EAAAA,IAAI,YAAYD,iBAFhB,IAGA,OAAOC,IAAI,CAACC,aAAZ,KAA8B,UAJhC;AAMD,CAPsC,GAAvC;;AASA,MAAMC,MAAM,GAAGX,aAAa,IAAIC,MAAM,CAACW,QAAP,CAAgBC,IAAjC,IAAyC,kBAAxD;AAEA,SACEb,aADF,EAEEO,8BAFF,EAGEJ,qBAHF,EAIEQ,MAJF","sourcesContent":["const hasBrowserEnv = typeof window !== 'undefined' && typeof document !== 'undefined';\r\n\r\n/**\r\n * Determine if we're running in a standard browser environment\r\n *\r\n * This allows axios to run in a web worker, and react-native.\r\n * Both environments support XMLHttpRequest, but not fully standard globals.\r\n *\r\n * web workers:\r\n *  typeof window -> undefined\r\n *  typeof document -> undefined\r\n *\r\n * react-native:\r\n *  navigator.product -> 'ReactNative'\r\n * nativescript\r\n *  navigator.product -> 'NativeScript' or 'NS'\r\n *\r\n * @returns {boolean}\r\n */\r\nconst hasStandardBrowserEnv = (\r\n  (product) => {\r\n    return hasBrowserEnv && ['ReactNative', 'NativeScript', 'NS'].indexOf(product) < 0\r\n  })(typeof navigator !== 'undefined' && navigator.product);\r\n\r\n/**\r\n * Determine if we're running in a standard browser webWorker environment\r\n *\r\n * Although the `isStandardBrowserEnv` method indicates that\r\n * `allows axios to run in a web worker`, the WebWorker will still be\r\n * filtered out due to its judgment standard\r\n * `typeof window !== 'undefined' && typeof document !== 'undefined'`.\r\n * This leads to a problem when axios post `FormData` in webWorker\r\n */\r\nconst hasStandardBrowserWebWorkerEnv = (() => {\r\n  return (\r\n    typeof WorkerGlobalScope !== 'undefined' &&\r\n    // eslint-disable-next-line no-undef\r\n    self instanceof WorkerGlobalScope &&\r\n    typeof self.importScripts === 'function'\r\n  );\r\n})();\r\n\r\nconst origin = hasBrowserEnv && window.location.href || 'http://localhost';\r\n\r\nexport {\r\n  hasBrowserEnv,\r\n  hasStandardBrowserWebWorkerEnv,\r\n  hasStandardBrowserEnv,\r\n  origin\r\n}\r\n"]},"metadata":{},"sourceType":"module"}