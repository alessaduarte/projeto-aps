{"ast":null,"code":"import CanceledError from \"../cancel/CanceledError.js\";\nimport AxiosError from \"../core/AxiosError.js\";\n\nconst composeSignals = (signals, timeout) => {\n  let controller = new AbortController();\n  let aborted;\n\n  const onabort = function (cancel) {\n    if (!aborted) {\n      aborted = true;\n      unsubscribe();\n      const err = cancel instanceof Error ? cancel : this.reason;\n      controller.abort(err instanceof AxiosError ? err : new CanceledError(err instanceof Error ? err.message : err));\n    }\n  };\n\n  let timer = timeout && setTimeout(() => {\n    onabort(new AxiosError(`timeout ${timeout} of ms exceeded`, AxiosError.ETIMEDOUT));\n  }, timeout);\n\n  const unsubscribe = () => {\n    if (signals) {\n      timer && clearTimeout(timer);\n      timer = null;\n      signals.forEach(signal => {\n        signal && (signal.removeEventListener ? signal.removeEventListener('abort', onabort) : signal.unsubscribe(onabort));\n      });\n      signals = null;\n    }\n  };\n\n  signals.forEach(signal => signal && signal.addEventListener && signal.addEventListener('abort', onabort));\n  const {\n    signal\n  } = controller;\n  signal.unsubscribe = unsubscribe;\n  return [signal, () => {\n    timer && clearTimeout(timer);\n    timer = null;\n  }];\n};\n\nexport default composeSignals;","map":{"version":3,"sources":["C:/Users/beatr/OneDrive/Documentos/Nah Trainer/projetoaps/Aplicação/Frontend/nahtrainer/node_modules/axios/lib/helpers/composeSignals.js"],"names":["CanceledError","AxiosError","composeSignals","signals","timeout","controller","AbortController","aborted","onabort","cancel","unsubscribe","err","Error","reason","abort","message","timer","setTimeout","ETIMEDOUT","clearTimeout","forEach","signal","removeEventListener","addEventListener"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,4BAA1B;AACA,OAAOC,UAAP,MAAuB,uBAAvB;;AAEA,MAAMC,cAAc,GAAG,CAACC,OAAD,EAAUC,OAAV,KAAsB;AAC3C,MAAIC,UAAU,GAAG,IAAIC,eAAJ,EAAjB;AAEA,MAAIC,OAAJ;;AAEA,QAAMC,OAAO,GAAG,UAAUC,MAAV,EAAkB;AAChC,QAAI,CAACF,OAAL,EAAc;AACZA,MAAAA,OAAO,GAAG,IAAV;AACAG,MAAAA,WAAW;AACX,YAAMC,GAAG,GAAGF,MAAM,YAAYG,KAAlB,GAA0BH,MAA1B,GAAmC,KAAKI,MAApD;AACAR,MAAAA,UAAU,CAACS,KAAX,CAAiBH,GAAG,YAAYV,UAAf,GAA4BU,GAA5B,GAAkC,IAAIX,aAAJ,CAAkBW,GAAG,YAAYC,KAAf,GAAuBD,GAAG,CAACI,OAA3B,GAAqCJ,GAAvD,CAAnD;AACD;AACF,GAPD;;AASA,MAAIK,KAAK,GAAGZ,OAAO,IAAIa,UAAU,CAAC,MAAM;AACtCT,IAAAA,OAAO,CAAC,IAAIP,UAAJ,CAAgB,WAAUG,OAAQ,iBAAlC,EAAoDH,UAAU,CAACiB,SAA/D,CAAD,CAAP;AACD,GAFgC,EAE9Bd,OAF8B,CAAjC;;AAIA,QAAMM,WAAW,GAAG,MAAM;AACxB,QAAIP,OAAJ,EAAa;AACXa,MAAAA,KAAK,IAAIG,YAAY,CAACH,KAAD,CAArB;AACAA,MAAAA,KAAK,GAAG,IAAR;AACAb,MAAAA,OAAO,CAACiB,OAAR,CAAgBC,MAAM,IAAI;AACxBA,QAAAA,MAAM,KACLA,MAAM,CAACC,mBAAP,GAA6BD,MAAM,CAACC,mBAAP,CAA2B,OAA3B,EAAoCd,OAApC,CAA7B,GAA4Ea,MAAM,CAACX,WAAP,CAAmBF,OAAnB,CADvE,CAAN;AAED,OAHD;AAIAL,MAAAA,OAAO,GAAG,IAAV;AACD;AACF,GAVD;;AAYAA,EAAAA,OAAO,CAACiB,OAAR,CAAiBC,MAAD,IAAYA,MAAM,IAAIA,MAAM,CAACE,gBAAjB,IAAqCF,MAAM,CAACE,gBAAP,CAAwB,OAAxB,EAAiCf,OAAjC,CAAjE;AAEA,QAAM;AAACa,IAAAA;AAAD,MAAWhB,UAAjB;AAEAgB,EAAAA,MAAM,CAACX,WAAP,GAAqBA,WAArB;AAEA,SAAO,CAACW,MAAD,EAAS,MAAM;AACpBL,IAAAA,KAAK,IAAIG,YAAY,CAACH,KAAD,CAArB;AACAA,IAAAA,KAAK,GAAG,IAAR;AACD,GAHM,CAAP;AAID,CAxCD;;AA0CA,eAAed,cAAf","sourcesContent":["import CanceledError from \"../cancel/CanceledError.js\";\r\nimport AxiosError from \"../core/AxiosError.js\";\r\n\r\nconst composeSignals = (signals, timeout) => {\r\n  let controller = new AbortController();\r\n\r\n  let aborted;\r\n\r\n  const onabort = function (cancel) {\r\n    if (!aborted) {\r\n      aborted = true;\r\n      unsubscribe();\r\n      const err = cancel instanceof Error ? cancel : this.reason;\r\n      controller.abort(err instanceof AxiosError ? err : new CanceledError(err instanceof Error ? err.message : err));\r\n    }\r\n  }\r\n\r\n  let timer = timeout && setTimeout(() => {\r\n    onabort(new AxiosError(`timeout ${timeout} of ms exceeded`, AxiosError.ETIMEDOUT))\r\n  }, timeout)\r\n\r\n  const unsubscribe = () => {\r\n    if (signals) {\r\n      timer && clearTimeout(timer);\r\n      timer = null;\r\n      signals.forEach(signal => {\r\n        signal &&\r\n        (signal.removeEventListener ? signal.removeEventListener('abort', onabort) : signal.unsubscribe(onabort));\r\n      });\r\n      signals = null;\r\n    }\r\n  }\r\n\r\n  signals.forEach((signal) => signal && signal.addEventListener && signal.addEventListener('abort', onabort));\r\n\r\n  const {signal} = controller;\r\n\r\n  signal.unsubscribe = unsubscribe;\r\n\r\n  return [signal, () => {\r\n    timer && clearTimeout(timer);\r\n    timer = null;\r\n  }];\r\n}\r\n\r\nexport default composeSignals;\r\n"]},"metadata":{},"sourceType":"module"}