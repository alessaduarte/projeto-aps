{"ast":null,"code":"import utils from './../utils.js';\nimport settle from './../core/settle.js';\nimport transitionalDefaults from '../defaults/transitional.js';\nimport AxiosError from '../core/AxiosError.js';\nimport CanceledError from '../cancel/CanceledError.js';\nimport parseProtocol from '../helpers/parseProtocol.js';\nimport platform from '../platform/index.js';\nimport AxiosHeaders from '../core/AxiosHeaders.js';\nimport progressEventReducer from '../helpers/progressEventReducer.js';\nimport resolveConfig from \"../helpers/resolveConfig.js\";\nconst isXHRAdapterSupported = typeof XMLHttpRequest !== 'undefined';\nexport default isXHRAdapterSupported && function (config) {\n  return new Promise(function dispatchXhrRequest(resolve, reject) {\n    const _config = resolveConfig(config);\n\n    let requestData = _config.data;\n    const requestHeaders = AxiosHeaders.from(_config.headers).normalize();\n    let {\n      responseType\n    } = _config;\n    let onCanceled;\n\n    function done() {\n      if (_config.cancelToken) {\n        _config.cancelToken.unsubscribe(onCanceled);\n      }\n\n      if (_config.signal) {\n        _config.signal.removeEventListener('abort', onCanceled);\n      }\n    }\n\n    let request = new XMLHttpRequest();\n    request.open(_config.method.toUpperCase(), _config.url, true); // Set the request timeout in MS\n\n    request.timeout = _config.timeout;\n\n    function onloadend() {\n      if (!request) {\n        return;\n      } // Prepare the response\n\n\n      const responseHeaders = AxiosHeaders.from('getAllResponseHeaders' in request && request.getAllResponseHeaders());\n      const responseData = !responseType || responseType === 'text' || responseType === 'json' ? request.responseText : request.response;\n      const response = {\n        data: responseData,\n        status: request.status,\n        statusText: request.statusText,\n        headers: responseHeaders,\n        config,\n        request\n      };\n      settle(function _resolve(value) {\n        resolve(value);\n        done();\n      }, function _reject(err) {\n        reject(err);\n        done();\n      }, response); // Clean up request\n\n      request = null;\n    }\n\n    if ('onloadend' in request) {\n      // Use onloadend if available\n      request.onloadend = onloadend;\n    } else {\n      // Listen for ready state to emulate onloadend\n      request.onreadystatechange = function handleLoad() {\n        if (!request || request.readyState !== 4) {\n          return;\n        } // The request errored out and we didn't get a response, this will be\n        // handled by onerror instead\n        // With one exception: request that using file: protocol, most browsers\n        // will return status as 0 even though it's a successful request\n\n\n        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {\n          return;\n        } // readystate handler is calling before onerror or ontimeout handlers,\n        // so we should call onloadend on the next 'tick'\n\n\n        setTimeout(onloadend);\n      };\n    } // Handle browser request cancellation (as opposed to a manual cancellation)\n\n\n    request.onabort = function handleAbort() {\n      if (!request) {\n        return;\n      }\n\n      reject(new AxiosError('Request aborted', AxiosError.ECONNABORTED, _config, request)); // Clean up request\n\n      request = null;\n    }; // Handle low level network errors\n\n\n    request.onerror = function handleError() {\n      // Real errors are hidden from us by the browser\n      // onerror should only fire if it's a network error\n      reject(new AxiosError('Network Error', AxiosError.ERR_NETWORK, _config, request)); // Clean up request\n\n      request = null;\n    }; // Handle timeout\n\n\n    request.ontimeout = function handleTimeout() {\n      let timeoutErrorMessage = _config.timeout ? 'timeout of ' + _config.timeout + 'ms exceeded' : 'timeout exceeded';\n      const transitional = _config.transitional || transitionalDefaults;\n\n      if (_config.timeoutErrorMessage) {\n        timeoutErrorMessage = _config.timeoutErrorMessage;\n      }\n\n      reject(new AxiosError(timeoutErrorMessage, transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED, _config, request)); // Clean up request\n\n      request = null;\n    }; // Remove Content-Type if data is undefined\n\n\n    requestData === undefined && requestHeaders.setContentType(null); // Add headers to the request\n\n    if ('setRequestHeader' in request) {\n      utils.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {\n        request.setRequestHeader(key, val);\n      });\n    } // Add withCredentials to request if needed\n\n\n    if (!utils.isUndefined(_config.withCredentials)) {\n      request.withCredentials = !!_config.withCredentials;\n    } // Add responseType to request if needed\n\n\n    if (responseType && responseType !== 'json') {\n      request.responseType = _config.responseType;\n    } // Handle progress if needed\n\n\n    if (typeof _config.onDownloadProgress === 'function') {\n      request.addEventListener('progress', progressEventReducer(_config.onDownloadProgress, true));\n    } // Not all browsers support upload events\n\n\n    if (typeof _config.onUploadProgress === 'function' && request.upload) {\n      request.upload.addEventListener('progress', progressEventReducer(_config.onUploadProgress));\n    }\n\n    if (_config.cancelToken || _config.signal) {\n      // Handle cancellation\n      // eslint-disable-next-line func-names\n      onCanceled = cancel => {\n        if (!request) {\n          return;\n        }\n\n        reject(!cancel || cancel.type ? new CanceledError(null, config, request) : cancel);\n        request.abort();\n        request = null;\n      };\n\n      _config.cancelToken && _config.cancelToken.subscribe(onCanceled);\n\n      if (_config.signal) {\n        _config.signal.aborted ? onCanceled() : _config.signal.addEventListener('abort', onCanceled);\n      }\n    }\n\n    const protocol = parseProtocol(_config.url);\n\n    if (protocol && platform.protocols.indexOf(protocol) === -1) {\n      reject(new AxiosError('Unsupported protocol ' + protocol + ':', AxiosError.ERR_BAD_REQUEST, config));\n      return;\n    } // Send the request\n\n\n    request.send(requestData || null);\n  });\n};","map":{"version":3,"sources":["C:/Users/aless/OneDrive/Área de Trabalho/Projeto APS/Aplicação/Frontend/nahtrainer/node_modules/axios/lib/adapters/xhr.js"],"names":["utils","settle","transitionalDefaults","AxiosError","CanceledError","parseProtocol","platform","AxiosHeaders","progressEventReducer","resolveConfig","isXHRAdapterSupported","XMLHttpRequest","config","Promise","dispatchXhrRequest","resolve","reject","_config","requestData","data","requestHeaders","from","headers","normalize","responseType","onCanceled","done","cancelToken","unsubscribe","signal","removeEventListener","request","open","method","toUpperCase","url","timeout","onloadend","responseHeaders","getAllResponseHeaders","responseData","responseText","response","status","statusText","_resolve","value","_reject","err","onreadystatechange","handleLoad","readyState","responseURL","indexOf","setTimeout","onabort","handleAbort","ECONNABORTED","onerror","handleError","ERR_NETWORK","ontimeout","handleTimeout","timeoutErrorMessage","transitional","clarifyTimeoutError","ETIMEDOUT","undefined","setContentType","forEach","toJSON","setRequestHeader","val","key","isUndefined","withCredentials","onDownloadProgress","addEventListener","onUploadProgress","upload","cancel","type","abort","subscribe","aborted","protocol","protocols","ERR_BAD_REQUEST","send"],"mappings":"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","sourcesContent":["import utils from './../utils.js';\nimport settle from './../core/settle.js';\nimport transitionalDefaults from '../defaults/transitional.js';\nimport AxiosError from '../core/AxiosError.js';\nimport CanceledError from '../cancel/CanceledError.js';\nimport parseProtocol from '../helpers/parseProtocol.js';\nimport platform from '../platform/index.js';\nimport AxiosHeaders from '../core/AxiosHeaders.js';\nimport progressEventReducer from '../helpers/progressEventReducer.js';\nimport resolveConfig from \"../helpers/resolveConfig.js\";\n\nconst isXHRAdapterSupported = typeof XMLHttpRequest !== 'undefined';\n\nexport default isXHRAdapterSupported && function (config) {\n  return new Promise(function dispatchXhrRequest(resolve, reject) {\n    const _config = resolveConfig(config);\n    let requestData = _config.data;\n    const requestHeaders = AxiosHeaders.from(_config.headers).normalize();\n    let {responseType} = _config;\n    let onCanceled;\n    function done() {\n      if (_config.cancelToken) {\n        _config.cancelToken.unsubscribe(onCanceled);\n      }\n\n      if (_config.signal) {\n        _config.signal.removeEventListener('abort', onCanceled);\n      }\n    }\n\n    let request = new XMLHttpRequest();\n\n    request.open(_config.method.toUpperCase(), _config.url, true);\n\n    // Set the request timeout in MS\n    request.timeout = _config.timeout;\n\n    function onloadend() {\n      if (!request) {\n        return;\n      }\n      // Prepare the response\n      const responseHeaders = AxiosHeaders.from(\n        'getAllResponseHeaders' in request && request.getAllResponseHeaders()\n      );\n      const responseData = !responseType || responseType === 'text' || responseType === 'json' ?\n        request.responseText : request.response;\n      const response = {\n        data: responseData,\n        status: request.status,\n        statusText: request.statusText,\n        headers: responseHeaders,\n        config,\n        request\n      };\n\n      settle(function _resolve(value) {\n        resolve(value);\n        done();\n      }, function _reject(err) {\n        reject(err);\n        done();\n      }, response);\n\n      // Clean up request\n      request = null;\n    }\n\n    if ('onloadend' in request) {\n      // Use onloadend if available\n      request.onloadend = onloadend;\n    } else {\n      // Listen for ready state to emulate onloadend\n      request.onreadystatechange = function handleLoad() {\n        if (!request || request.readyState !== 4) {\n          return;\n        }\n\n        // The request errored out and we didn't get a response, this will be\n        // handled by onerror instead\n        // With one exception: request that using file: protocol, most browsers\n        // will return status as 0 even though it's a successful request\n        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {\n          return;\n        }\n        // readystate handler is calling before onerror or ontimeout handlers,\n        // so we should call onloadend on the next 'tick'\n        setTimeout(onloadend);\n      };\n    }\n\n    // Handle browser request cancellation (as opposed to a manual cancellation)\n    request.onabort = function handleAbort() {\n      if (!request) {\n        return;\n      }\n\n      reject(new AxiosError('Request aborted', AxiosError.ECONNABORTED, _config, request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle low level network errors\n    request.onerror = function handleError() {\n      // Real errors are hidden from us by the browser\n      // onerror should only fire if it's a network error\n      reject(new AxiosError('Network Error', AxiosError.ERR_NETWORK, _config, request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle timeout\n    request.ontimeout = function handleTimeout() {\n      let timeoutErrorMessage = _config.timeout ? 'timeout of ' + _config.timeout + 'ms exceeded' : 'timeout exceeded';\n      const transitional = _config.transitional || transitionalDefaults;\n      if (_config.timeoutErrorMessage) {\n        timeoutErrorMessage = _config.timeoutErrorMessage;\n      }\n      reject(new AxiosError(\n        timeoutErrorMessage,\n        transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED,\n        _config,\n        request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Remove Content-Type if data is undefined\n    requestData === undefined && requestHeaders.setContentType(null);\n\n    // Add headers to the request\n    if ('setRequestHeader' in request) {\n      utils.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {\n        request.setRequestHeader(key, val);\n      });\n    }\n\n    // Add withCredentials to request if needed\n    if (!utils.isUndefined(_config.withCredentials)) {\n      request.withCredentials = !!_config.withCredentials;\n    }\n\n    // Add responseType to request if needed\n    if (responseType && responseType !== 'json') {\n      request.responseType = _config.responseType;\n    }\n\n    // Handle progress if needed\n    if (typeof _config.onDownloadProgress === 'function') {\n      request.addEventListener('progress', progressEventReducer(_config.onDownloadProgress, true));\n    }\n\n    // Not all browsers support upload events\n    if (typeof _config.onUploadProgress === 'function' && request.upload) {\n      request.upload.addEventListener('progress', progressEventReducer(_config.onUploadProgress));\n    }\n\n    if (_config.cancelToken || _config.signal) {\n      // Handle cancellation\n      // eslint-disable-next-line func-names\n      onCanceled = cancel => {\n        if (!request) {\n          return;\n        }\n        reject(!cancel || cancel.type ? new CanceledError(null, config, request) : cancel);\n        request.abort();\n        request = null;\n      };\n\n      _config.cancelToken && _config.cancelToken.subscribe(onCanceled);\n      if (_config.signal) {\n        _config.signal.aborted ? onCanceled() : _config.signal.addEventListener('abort', onCanceled);\n      }\n    }\n\n    const protocol = parseProtocol(_config.url);\n\n    if (protocol && platform.protocols.indexOf(protocol) === -1) {\n      reject(new AxiosError('Unsupported protocol ' + protocol + ':', AxiosError.ERR_BAD_REQUEST, config));\n      return;\n    }\n\n\n    // Send the request\n    request.send(requestData || null);\n  });\n}\n"]},"metadata":{},"sourceType":"module"}