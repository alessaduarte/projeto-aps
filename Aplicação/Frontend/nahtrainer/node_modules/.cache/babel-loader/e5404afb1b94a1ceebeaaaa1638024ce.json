{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Dropdown from './Dropdown';\nimport DropdownToggle from './DropdownToggle';\nimport DropdownMenu, { alignPropType } from './DropdownMenu';\nvar propTypes = {\n  /**\r\n   * An html id attribute for the Toggle button, necessary for assistive technologies, such as screen readers.\r\n   * @type {string|number}\r\n   * @required\r\n   */\n  id: PropTypes.any,\n\n  /** An `href` passed to the Toggle component */\n  href: PropTypes.string,\n\n  /** An `onClick` handler passed to the Toggle component */\n  onClick: PropTypes.func,\n\n  /** The content of the non-toggle Button.  */\n  title: PropTypes.node.isRequired,\n\n  /** Disables both Buttons  */\n  disabled: PropTypes.bool,\n\n  /**\r\n   * Aligns the dropdown menu responsively.\r\n   *\r\n   * _see [DropdownMenu](#dropdown-menu-props) for more details_\r\n   *\r\n   * @type {\"left\"|\"right\"|{ sm: \"left\"|\"right\" }|{ md: \"left\"|\"right\" }|{ lg: \"left\"|\"right\" }|{ xl: \"left\"|\"right\"} }\r\n   */\n  menuAlign: alignPropType,\n\n  /** An ARIA accessible role applied to the Menu component. When set to 'menu', The dropdown */\n  menuRole: PropTypes.string,\n\n  /** Whether to render the dropdown menu in the DOM before the first time it is shown */\n  renderMenuOnMount: PropTypes.bool,\n\n  /**\r\n   *  Which event when fired outside the component will cause it to be closed.\r\n   *\r\n   * _see [DropdownMenu](#dropdown-menu-props) for more details_\r\n   */\n  rootCloseEvent: PropTypes.string,\n\n  /**\r\n   * Menu color variant.\r\n   *\r\n   * Omitting this will use the default light color.\r\n   */\n  menuVariant: PropTypes.oneOf(['dark']),\n\n  /** @ignore */\n  bsPrefix: PropTypes.string,\n\n  /** @ignore */\n  variant: PropTypes.string,\n\n  /** @ignore */\n  size: PropTypes.string\n};\n/**\r\n * A convenience component for simple or general use dropdowns. Renders a `Button` toggle and all `children`\r\n * are passed directly to the default `Dropdown.Menu`.\r\n *\r\n * _All unknown props are passed through to the `Dropdown` component._ Only\r\n * the Button `variant`, `size` and `bsPrefix` props are passed to the toggle,\r\n * along with menu related props are passed to the `Dropdown.Menu`\r\n */\n\nvar DropdownButton = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var title = _ref.title,\n      children = _ref.children,\n      bsPrefix = _ref.bsPrefix,\n      rootCloseEvent = _ref.rootCloseEvent,\n      variant = _ref.variant,\n      size = _ref.size,\n      menuAlign = _ref.menuAlign,\n      menuRole = _ref.menuRole,\n      renderMenuOnMount = _ref.renderMenuOnMount,\n      disabled = _ref.disabled,\n      href = _ref.href,\n      id = _ref.id,\n      menuVariant = _ref.menuVariant,\n      props = _objectWithoutPropertiesLoose(_ref, [\"title\", \"children\", \"bsPrefix\", \"rootCloseEvent\", \"variant\", \"size\", \"menuAlign\", \"menuRole\", \"renderMenuOnMount\", \"disabled\", \"href\", \"id\", \"menuVariant\"]);\n\n  return /*#__PURE__*/React.createElement(Dropdown, _extends({\n    ref: ref\n  }, props), /*#__PURE__*/React.createElement(DropdownToggle, {\n    id: id,\n    href: href,\n    size: size,\n    variant: variant,\n    disabled: disabled,\n    childBsPrefix: bsPrefix\n  }, title), /*#__PURE__*/React.createElement(DropdownMenu, {\n    align: menuAlign,\n    role: menuRole,\n    renderOnMount: renderMenuOnMount,\n    rootCloseEvent: rootCloseEvent,\n    variant: menuVariant\n  }, children));\n});\nDropdownButton.displayName = 'DropdownButton';\nDropdownButton.propTypes = propTypes;\nexport default DropdownButton;","map":{"version":3,"sources":["C:/Users/aless/OneDrive/Área de Trabalho/Projeto APS/projetoaps/Aplicação/Frontend/nahtrainer/node_modules/@themesberg/react-bootstrap/lib/esm/DropdownButton.js"],"names":["_extends","_objectWithoutPropertiesLoose","React","PropTypes","Dropdown","DropdownToggle","DropdownMenu","alignPropType","propTypes","id","any","href","string","onClick","func","title","node","isRequired","disabled","bool","menuAlign","menuRole","renderMenuOnMount","rootCloseEvent","menuVariant","oneOf","bsPrefix","variant","size","DropdownButton","forwardRef","_ref","ref","children","props","createElement","childBsPrefix","align","role","renderOnMount","displayName"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Dropdown from './Dropdown';\r\nimport DropdownToggle from './DropdownToggle';\r\nimport DropdownMenu, { alignPropType } from './DropdownMenu';\r\nvar propTypes = {\r\n  /**\r\n   * An html id attribute for the Toggle button, necessary for assistive technologies, such as screen readers.\r\n   * @type {string|number}\r\n   * @required\r\n   */\r\n  id: PropTypes.any,\r\n\r\n  /** An `href` passed to the Toggle component */\r\n  href: PropTypes.string,\r\n\r\n  /** An `onClick` handler passed to the Toggle component */\r\n  onClick: PropTypes.func,\r\n\r\n  /** The content of the non-toggle Button.  */\r\n  title: PropTypes.node.isRequired,\r\n\r\n  /** Disables both Buttons  */\r\n  disabled: PropTypes.bool,\r\n\r\n  /**\r\n   * Aligns the dropdown menu responsively.\r\n   *\r\n   * _see [DropdownMenu](#dropdown-menu-props) for more details_\r\n   *\r\n   * @type {\"left\"|\"right\"|{ sm: \"left\"|\"right\" }|{ md: \"left\"|\"right\" }|{ lg: \"left\"|\"right\" }|{ xl: \"left\"|\"right\"} }\r\n   */\r\n  menuAlign: alignPropType,\r\n\r\n  /** An ARIA accessible role applied to the Menu component. When set to 'menu', The dropdown */\r\n  menuRole: PropTypes.string,\r\n\r\n  /** Whether to render the dropdown menu in the DOM before the first time it is shown */\r\n  renderMenuOnMount: PropTypes.bool,\r\n\r\n  /**\r\n   *  Which event when fired outside the component will cause it to be closed.\r\n   *\r\n   * _see [DropdownMenu](#dropdown-menu-props) for more details_\r\n   */\r\n  rootCloseEvent: PropTypes.string,\r\n\r\n  /**\r\n   * Menu color variant.\r\n   *\r\n   * Omitting this will use the default light color.\r\n   */\r\n  menuVariant: PropTypes.oneOf(['dark']),\r\n\r\n  /** @ignore */\r\n  bsPrefix: PropTypes.string,\r\n\r\n  /** @ignore */\r\n  variant: PropTypes.string,\r\n\r\n  /** @ignore */\r\n  size: PropTypes.string\r\n};\r\n/**\r\n * A convenience component for simple or general use dropdowns. Renders a `Button` toggle and all `children`\r\n * are passed directly to the default `Dropdown.Menu`.\r\n *\r\n * _All unknown props are passed through to the `Dropdown` component._ Only\r\n * the Button `variant`, `size` and `bsPrefix` props are passed to the toggle,\r\n * along with menu related props are passed to the `Dropdown.Menu`\r\n */\r\n\r\nvar DropdownButton = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\r\n  var title = _ref.title,\r\n      children = _ref.children,\r\n      bsPrefix = _ref.bsPrefix,\r\n      rootCloseEvent = _ref.rootCloseEvent,\r\n      variant = _ref.variant,\r\n      size = _ref.size,\r\n      menuAlign = _ref.menuAlign,\r\n      menuRole = _ref.menuRole,\r\n      renderMenuOnMount = _ref.renderMenuOnMount,\r\n      disabled = _ref.disabled,\r\n      href = _ref.href,\r\n      id = _ref.id,\r\n      menuVariant = _ref.menuVariant,\r\n      props = _objectWithoutPropertiesLoose(_ref, [\"title\", \"children\", \"bsPrefix\", \"rootCloseEvent\", \"variant\", \"size\", \"menuAlign\", \"menuRole\", \"renderMenuOnMount\", \"disabled\", \"href\", \"id\", \"menuVariant\"]);\r\n\r\n  return /*#__PURE__*/React.createElement(Dropdown, _extends({\r\n    ref: ref\r\n  }, props), /*#__PURE__*/React.createElement(DropdownToggle, {\r\n    id: id,\r\n    href: href,\r\n    size: size,\r\n    variant: variant,\r\n    disabled: disabled,\r\n    childBsPrefix: bsPrefix\r\n  }, title), /*#__PURE__*/React.createElement(DropdownMenu, {\r\n    align: menuAlign,\r\n    role: menuRole,\r\n    renderOnMount: renderMenuOnMount,\r\n    rootCloseEvent: rootCloseEvent,\r\n    variant: menuVariant\r\n  }, children));\r\n});\r\nDropdownButton.displayName = 'DropdownButton';\r\nDropdownButton.propTypes = propTypes;\r\nexport default DropdownButton;"]},"metadata":{},"sourceType":"module"}