{"ast":null,"code":"'use strict';\n/**\r\n * Throttle decorator\r\n * @param {Function} fn\r\n * @param {Number} freq\r\n * @return {Function}\r\n */\n\nfunction throttle(fn, freq) {\n  let timestamp = 0;\n  const threshold = 1000 / freq;\n  let timer = null;\n  return function throttled() {\n    const force = this === true;\n    const now = Date.now();\n\n    if (force || now - timestamp > threshold) {\n      if (timer) {\n        clearTimeout(timer);\n        timer = null;\n      }\n\n      timestamp = now;\n      return fn.apply(null, arguments);\n    }\n\n    if (!timer) {\n      timer = setTimeout(() => {\n        timer = null;\n        timestamp = Date.now();\n        return fn.apply(null, arguments);\n      }, threshold - (now - timestamp));\n    }\n  };\n}\n\nexport default throttle;","map":{"version":3,"sources":["C:/Users/beatr/OneDrive/Documentos/Nah Trainer/projetoaps/Aplicação/Frontend/nahtrainer/node_modules/axios/lib/helpers/throttle.js"],"names":["throttle","fn","freq","timestamp","threshold","timer","throttled","force","now","Date","clearTimeout","apply","arguments","setTimeout"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASA,QAAT,CAAkBC,EAAlB,EAAsBC,IAAtB,EAA4B;AAC1B,MAAIC,SAAS,GAAG,CAAhB;AACA,QAAMC,SAAS,GAAG,OAAOF,IAAzB;AACA,MAAIG,KAAK,GAAG,IAAZ;AACA,SAAO,SAASC,SAAT,GAAqB;AAC1B,UAAMC,KAAK,GAAG,SAAS,IAAvB;AAEA,UAAMC,GAAG,GAAGC,IAAI,CAACD,GAAL,EAAZ;;AACA,QAAID,KAAK,IAAIC,GAAG,GAAGL,SAAN,GAAkBC,SAA/B,EAA0C;AACxC,UAAIC,KAAJ,EAAW;AACTK,QAAAA,YAAY,CAACL,KAAD,CAAZ;AACAA,QAAAA,KAAK,GAAG,IAAR;AACD;;AACDF,MAAAA,SAAS,GAAGK,GAAZ;AACA,aAAOP,EAAE,CAACU,KAAH,CAAS,IAAT,EAAeC,SAAf,CAAP;AACD;;AACD,QAAI,CAACP,KAAL,EAAY;AACVA,MAAAA,KAAK,GAAGQ,UAAU,CAAC,MAAM;AACvBR,QAAAA,KAAK,GAAG,IAAR;AACAF,QAAAA,SAAS,GAAGM,IAAI,CAACD,GAAL,EAAZ;AACA,eAAOP,EAAE,CAACU,KAAH,CAAS,IAAT,EAAeC,SAAf,CAAP;AACD,OAJiB,EAIfR,SAAS,IAAII,GAAG,GAAGL,SAAV,CAJM,CAAlB;AAKD;AACF,GAnBD;AAoBD;;AAED,eAAeH,QAAf","sourcesContent":["'use strict';\r\n\r\n/**\r\n * Throttle decorator\r\n * @param {Function} fn\r\n * @param {Number} freq\r\n * @return {Function}\r\n */\r\nfunction throttle(fn, freq) {\r\n  let timestamp = 0;\r\n  const threshold = 1000 / freq;\r\n  let timer = null;\r\n  return function throttled() {\r\n    const force = this === true;\r\n\r\n    const now = Date.now();\r\n    if (force || now - timestamp > threshold) {\r\n      if (timer) {\r\n        clearTimeout(timer);\r\n        timer = null;\r\n      }\r\n      timestamp = now;\r\n      return fn.apply(null, arguments);\r\n    }\r\n    if (!timer) {\r\n      timer = setTimeout(() => {\r\n        timer = null;\r\n        timestamp = Date.now();\r\n        return fn.apply(null, arguments);\r\n      }, threshold - (now - timestamp));\r\n    }\r\n  };\r\n}\r\n\r\nexport default throttle;\r\n"]},"metadata":{},"sourceType":"module"}