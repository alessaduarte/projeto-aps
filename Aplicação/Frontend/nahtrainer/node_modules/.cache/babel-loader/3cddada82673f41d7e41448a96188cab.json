{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aless\\\\OneDrive\\\\\\xC1rea de Trabalho\\\\Projeto APS\\\\projetoaps\\\\Aplica\\xE7\\xE3o\\\\Frontend\\\\nahtrainer\\\\src\\\\protectedroutes.js\";\nimport React, { useState } from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { Routes } from './routes';\n\nconst isAuthenticated = () => {\n  return !!localStorage.getItem('authToken');\n};\n\nconst ProtectedRoutes = () => _ref => {\n  let {\n    component: Component,\n    ...rest\n  } = _ref;\n  const [loggedIn, setLoggedIn] = useState(false);\n\n  const handleLogin = () => {\n    // Lógica de autenticação aqui (se necessário)\n    // Por enquanto, apenas atualizamos o estado loggedIn para true\n    setLoggedIn(true);\n  };\n\n  return /*#__PURE__*/React.createElement(Route, Object.assign({}, rest, {\n    render: props => {\n      // Se loggedIn for true, redirecionamos para a página de Alunos\n      if (loggedIn) {\n        return /*#__PURE__*/React.createElement(Redirect, {\n          to: Routes.Alunos.path,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 24,\n            columnNumber: 28\n          }\n        });\n      } else if (props.location.pathname === Routes.Login.path) {\n        // Se estiver na página de login, passamos a prop handleLogin\n        // para que ela seja chamada quando o usuário clicar no botão \"Entrar\"\n        return /*#__PURE__*/React.createElement(Component, Object.assign({}, props, {\n          handleLogin: handleLogin,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 28\n          }\n        }));\n      } else {\n        // Redirecionamos para a página de login caso contrário\n        return /*#__PURE__*/React.createElement(Redirect, {\n          to: Routes.Login.path,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 28\n          }\n        });\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 9\n    }\n  }));\n};\n\nexport default ProtectedRoutes;","map":{"version":3,"sources":["C:/Users/aless/OneDrive/Área de Trabalho/Projeto APS/projetoaps/Aplicação/Frontend/nahtrainer/src/protectedroutes.js"],"names":["React","useState","Route","Redirect","Routes","isAuthenticated","localStorage","getItem","ProtectedRoutes","component","Component","rest","loggedIn","setLoggedIn","handleLogin","props","Alunos","path","location","pathname","Login"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,kBAAhC;AACA,SAASC,MAAT,QAAuB,UAAvB;;AAEA,MAAMC,eAAe,GAAG,MAAM;AAC1B,SAAO,CAAC,CAACC,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAT;AACH,CAFD;;AAIA,MAAMC,eAAe,GAAG,MAAM,QAAuC;AAAA,MAAtC;AAAEC,IAAAA,SAAS,EAAEC,SAAb;AAAwB,OAAGC;AAA3B,GAAsC;AACjE,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BZ,QAAQ,CAAC,KAAD,CAAxC;;AAEA,QAAMa,WAAW,GAAG,MAAM;AACtB;AACA;AACAD,IAAAA,WAAW,CAAC,IAAD,CAAX;AACH,GAJD;;AAMA,sBACI,oBAAC,KAAD,oBACQF,IADR;AAEI,IAAA,MAAM,EAAGI,KAAD,IAAW;AACf;AACA,UAAIH,QAAJ,EAAc;AACV,4BAAO,oBAAC,QAAD;AAAU,UAAA,EAAE,EAAER,MAAM,CAACY,MAAP,CAAcC,IAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACH,OAFD,MAEO,IAAIF,KAAK,CAACG,QAAN,CAAeC,QAAf,KAA4Bf,MAAM,CAACgB,KAAP,CAAaH,IAA7C,EAAmD;AACtD;AACA;AACA,4BAAO,oBAAC,SAAD,oBAAeF,KAAf;AAAsB,UAAA,WAAW,EAAED,WAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAP;AACH,OAJM,MAIA;AACH;AACA,4BAAO,oBAAC,QAAD;AAAU,UAAA,EAAE,EAAEV,MAAM,CAACgB,KAAP,CAAaH,IAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACH;AACJ,KAdL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADJ;AAkBH,CA3BD;;AA6BA,eAAeT,eAAf","sourcesContent":["import React, { useState } from 'react';\r\nimport { Route, Redirect } from 'react-router-dom'\r\nimport { Routes } from './routes'\r\n\r\nconst isAuthenticated = () => {\r\n    return !!localStorage.getItem('authToken')\r\n}\r\n\r\nconst ProtectedRoutes = () => ({ component: Component, ...rest }) => {\r\n    const [loggedIn, setLoggedIn] = useState(false);\r\n\r\n    const handleLogin = () => {\r\n        // Lógica de autenticação aqui (se necessário)\r\n        // Por enquanto, apenas atualizamos o estado loggedIn para true\r\n        setLoggedIn(true);\r\n    };\r\n\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={(props) => {\r\n                // Se loggedIn for true, redirecionamos para a página de Alunos\r\n                if (loggedIn) {\r\n                    return <Redirect to={Routes.Alunos.path} />;\r\n                } else if (props.location.pathname === Routes.Login.path) {\r\n                    // Se estiver na página de login, passamos a prop handleLogin\r\n                    // para que ela seja chamada quando o usuário clicar no botão \"Entrar\"\r\n                    return <Component {...props} handleLogin={handleLogin} />;\r\n                } else {\r\n                    // Redirecionamos para a página de login caso contrário\r\n                    return <Redirect to={Routes.Login.path} />;\r\n                }\r\n            }}\r\n        />\r\n    );\r\n};\r\n\r\nexport default ProtectedRoutes;"]},"metadata":{},"sourceType":"module"}